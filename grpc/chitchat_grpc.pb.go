//This file acts as a contract between the client and server,
// describing both the structure of the data and the remote procedure calls (RPCs)
// they use to communicate.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: grpc/chitchat.proto

package grpc

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChitChat_SendMessage_FullMethodName = "/grpc.ChitChat/SendMessage"
)

// ChitChatClient is the client API for ChitChat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChitChatClient interface {
	SendMessage(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MessageLog, MessageLog], error)
}

type chitChatClient struct {
	cc grpc.ClientConnInterface
}

func NewChitChatClient(cc grpc.ClientConnInterface) ChitChatClient {
	return &chitChatClient{cc}
}

func (c *chitChatClient) SendMessage(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MessageLog, MessageLog], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChitChat_ServiceDesc.Streams[0], ChitChat_SendMessage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MessageLog, MessageLog]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChitChat_SendMessageClient = grpc.BidiStreamingClient[MessageLog, MessageLog]

// ChitChatServer is the server API for ChitChat service.
// All implementations must embed UnimplementedChitChatServer
// for forward compatibility.
type ChitChatServer interface {
	SendMessage(grpc.BidiStreamingServer[MessageLog, MessageLog]) error
	mustEmbedUnimplementedChitChatServer()
}

// UnimplementedChitChatServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChitChatServer struct{}

func (UnimplementedChitChatServer) SendMessage(grpc.BidiStreamingServer[MessageLog, MessageLog]) error {
	return status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedChitChatServer) mustEmbedUnimplementedChitChatServer() {}
func (UnimplementedChitChatServer) testEmbeddedByValue()                  {}

// UnsafeChitChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChitChatServer will
// result in compilation errors.
type UnsafeChitChatServer interface {
	mustEmbedUnimplementedChitChatServer()
}

func RegisterChitChatServer(s grpc.ServiceRegistrar, srv ChitChatServer) {
	// If the following call pancis, it indicates UnimplementedChitChatServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChitChat_ServiceDesc, srv)
}

func _ChitChat_SendMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChitChatServer).SendMessage(&grpc.GenericServerStream[MessageLog, MessageLog]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChitChat_SendMessageServer = grpc.BidiStreamingServer[MessageLog, MessageLog]

// ChitChat_ServiceDesc is the grpc.ServiceDesc for ChitChat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChitChat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ChitChat",
	HandlerType: (*ChitChatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMessage",
			Handler:       _ChitChat_SendMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc/chitchat.proto",
}
